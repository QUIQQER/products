<?php

/**
 * This file contains QUI\ERP\Products\EventHandling
 */
namespace QUI\ERP\Products;

use QUI;
use QUI\ERP\Products\Handler\Products;
use QUI\ERP\Products\Handler\Fields;
use QUI\Tags\Groups\Handler as TagGroupsHandler;
use QUI\ERP\Products\Handler\Categories;

/**
 * Class EventHandling
 *
 * @package QUI\ERP\Products
 */
class Crons
{
    /**
     * Time for one product to update its cache (seconds)
     */
    const PRODUCT_CACHE_UPDATE_TIME = 3;

    /**
     * Tag generator value for product tags
     */
    const TAG_GENERATOR = 'quiqqer/products';

    /**
     * Updates cache values for all products
     *
     * @throws QUI\Exception
     */
    public static function updateProductCache()
    {
        $products = Products::getProducts();

        /** @var QUI\ERP\Products\Product\Model $Product */
        foreach ($products as $Product) {
            set_time_limit(self::PRODUCT_CACHE_UPDATE_TIME);

            try {
                $Product->updateCache();
            } catch (QUI\Exception $Exception) {
                QUI\System\Log::addWarning(
                    'cron :: updateProductCache() :: Could not update cache'
                    . ' for Product #' . $Product->getId() . ' -> '
                    . $Exception->getMessage()
                );
            }
        }
    }

    /**
     * Generates tags for every entry in every product attribute list field
     * and assigns them to projects, products and product category sites
     *
     * @hrows QUI\Exception
     */
    public static function generateProductAttributeListTags()
    {
        $fields = Fields::getFields(array(
            'where' => array(
                'type' => 'ProductAttributeList'
            )
        ));

        $projects = QUI::getProjectManager()->getProjects(false);
        $langs    = QUI::availableLanguages();

        // get all tag groups that have been previously generated by this script
        $tagGroupIdsCurrent = array();

        foreach ($projects as $projectName) {
            foreach ($langs as $l) {
                $Project = QUI::getProject($projectName, $l);

                if (!isset($tagGroupIdsCurrent[$l])) {
                    $tagGroupIdsCurrent[$l] = array();
                }

                $tagGroupIdsCurrent[$l][$Project->getName()] = TagGroupsHandler::getGroupIds(
                    $Project,
                    array(
                        'where' => array(
                            'generator' => self::TAG_GENERATOR
                        )
                    )
                );
            }
        }

        $tagsGroupIdsNew      = array();
        $productIdTagsRemoved = array();

        /** @var QUI\ERP\Products\Field\Field $Field */
        foreach ($fields as $Field) {
            $options        = $Field->getOptions();
            $fieldTagGroups = array();

            if (!isset($options['generate_tags'])
                || !$options['generate_tags']
            ) {
                continue;
            }

            if (!isset($options['entries'])) {
                QUI\System\Log::addWarning(
                    'Cron :: generateProductAttributeListTags -> Could not find'
                    . ' product attribute list entries for field #' . $Field->getId()
                );

                continue;
            }

            // generate tag group for each language and project
            foreach ($projects as $projectName) {
                foreach ($langs as $l) {
                    if (!isset($tagsGroupIdsNew[$l])) {
                        $tagsGroupIdsNew[$l] = array();
                    }

                    $Project = QUI::getProject($projectName, $l);

                    if (!isset($tagsGroupIdsNew[$l][$Project->getName()])) {
                        $tagsGroupIdsNew[$l][$Project->getName()] = array();
                    }

                    $Locale = new QUI\Locale();
                    $Locale->setCurrent($l);

                    if (!isset($fieldTagGroups[$l])) {
                        $fieldTagGroups[$l] = array();
                    }

                    $TagGroup = self::addTagGroupToProject(
                        $Project,
                        $Field->getTitle($Locale),
                        $Field->getWorkingTitle($Locale)
                    );

                    $tagsGroupIdsNew[$l][$Project->getName()][] = $TagGroup->getId();

                    // remove all tags generated by this scripts from tag group
                    $TagGroup->removeTagsByGenerator(self::TAG_GENERATOR);

                    $fieldTagGroups[$l][] = $TagGroup;
                }
            }

            // generate tags
            $tagTitlesByLang = array();
            $tagsByLang      = array();
            $tagList         = array();

            foreach ($options['entries'] as $entry) {
                foreach ($entry['title'] as $lang => $text) {
                    if (empty($lang)
                        || empty($text)
                    ) {
                        continue;
                    }

                    $tagTitlesByLang[$lang][] = $text;
                    $tagList[]                = $text;
                }
            }

            foreach ($tagTitlesByLang as $lang => $tagTitles) {
                $tagGroups = $fieldTagGroups[$lang];

                if (!isset($tagsByLang[$lang])) {
                    $tagsByLang[$lang] = array();
                }

                // add tags to projects
                foreach ($projects as $projectName) {
                    $Project = QUI::getProject($projectName, $lang);
                    $tags    = self::addTagsToProject($Project, $tagTitles);

                    $categories = Categories::getCategories();

                    /** @var QUI\ERP\Products\Category\Category $Category */
                    foreach ($categories as $Category) {
                        if (!$Category->getField($Field->getId())) {
                            continue;
                        }

                        $sites = $Category->getSites($Project);

                        /** @var QUI\Projects\Site $CategorySite */
                        foreach ($sites as $CategorySite) {
                            $Edit            = $CategorySite->getEdit();
                            $siteTagGroupIds = $Edit->getAttribute('quiqqer.tags.tagGroups');
                            $siteTagGroupIds = explode(',', $siteTagGroupIds);

                            $siteTagGroupIds = array_values(
                                array_filter($siteTagGroupIds, function ($value) {
                                    return !empty($value);
                                })
                            );

                            // add tag groups to category sites
                            /** @var QUI\Tags\Groups\Group $TagGroup */
                            foreach ($tagGroups as $TagGroup) {
                                if (!in_array($TagGroup->getId(), $siteTagGroupIds)) {
                                    $siteTagGroupIds[] = $TagGroup->getId();
                                }
                            }

                            $Edit->setAttribute('quiqqer.tags.tagGroups', implode(',', $siteTagGroupIds));
                            $Edit->save(QUI::getUsers()->getSystemUser());
                        }
                    }
                }

                $tagsByLang[$lang] = $tags;

                // add tags to tag groups
                /** @var QUI\Tags\Groups\Group $TagGroup */
                foreach ($tagGroups as $TagGroup) {
                    $TagGroup->addTags($tags);
                    $TagGroup->save();
                }
            }

            // add tags to products
            $products = $Field->getProducts();

            /** @var QUI\ERP\Products\Product\Product $Product */
            foreach ($products as $Product) {
                $tagFields = $Product->getFieldsByType('productstags.tags');

                /** @var QUI\ERP\Tags\Field $Field */
                foreach ($tagFields as $Field) {
                    if (!$Field->getOption('insert_tags')) {
                        continue;
                    }

                    foreach ($tagsByLang as $lang => $tags) {
                        // delete all tags from product (if it did not already happen before)
                        if (!isset($productIdTagsRemoved[$Product->getId()])) {
                            $Field->removeTags($lang, self::TAG_GENERATOR);
                            $productIdTagsRemoved[$Product->getId()] = true;
                        }

                        // add tags from product
                        $Field->addTags($tags, $lang, self::TAG_GENERATOR);
                    }
                }

                $Product->save();
            }
        }

        // delete tag groups that are not existing anymore and have no user-tags added
        foreach ($tagGroupIdsCurrent as $lang => $projects) {
            foreach ($projects as $projectName => $tagGroupIds) {
                // determine deletion candidates
                $deleteTagGroupIds = array_diff(
                    $tagGroupIds,
                    $tagsGroupIdsNew[$lang][$projectName]
                );

                $Project = QUI::getProject($projectName, $lang);

                foreach ($deleteTagGroupIds as $tagGroupId) {
                    $TagGroup     = TagGroupsHandler::get($Project, $tagGroupId);
                    $tagGroupTags = $TagGroup->getTags();

                    // check if any tags exist in the group other than generated by this script
                    foreach ($tagGroupTags as $tagData) {
                        if ($tagData['generator'] != self::TAG_GENERATOR) {
                            continue 2;
                        }
                    }

                    $TagGroup->delete();
                }
            }
        }
    }

    /**
     * Adds a tag to a project
     *
     * @param QUI\Projects\Project $Project
     * @param array $tagTitles - tag titles
     *
     * @return array - tag names
     */
    protected static function addTagsToProject($Project, $tagTitles)
    {
        $TagManager = new QUI\Tags\Manager($Project);
        $tagNames   = array();

        try {
            foreach ($tagTitles as $tagTitle) {
                if ($TagManager->existsTagTitle($tagTitle)) {
                    $tag        = $TagManager->getByTitle($tagTitle);
                    $tagNames[] = $tag['tag'];
                    continue;
                }

                $tagNames[] = $TagManager->add(
                    $tagTitle,
                    array(
                        'title'     => $tagTitle,
                        'generator' => self::TAG_GENERATOR,
                        'generated' => 1
                    )
                );
            }
        } catch (\Exception $Exception) {
            QUI\System\Log::addError(
                'Cron :: generateProductAttributeListTags -> Could not'
                . ' add tag to project ' . $Project->getTitle() . ' with lang "' . $Project->getLang() . '" -> '
                . $Exception->getMessage()
            );
        }

        return $tagNames;
    }

    /**
     * Adds a tag group to a project
     *
     * @param QUI\Projects\Project $Project
     * @param string $tagGroupTitle - title of tag group
     * @param string $tagGroupWorkingTitle - title of tag group
     *
     * @return QUI\Tags\Groups\Group - generated tag group
     *
     * @throws QUI\Exception
     */
    protected static function addTagGroupToProject($Project, $tagGroupTitle, $tagGroupWorkingTitle)
    {
        // check if tag group already exists (by working title)
        $result = QUI::getDataBase()->fetch(array(
            'select' => array(
                'id'
            ),
            'from'   => QUI::getDBProjectTableName('tags_groups', $Project),
            'where'  => array(
                'title'        => $tagGroupTitle,
                'workingtitle' => $tagGroupWorkingTitle,
                'generator'    => self::TAG_GENERATOR
            )
        ));

        if (!empty($result)) {
            return TagGroupsHandler::get($Project, $result[0]['id']);
        }

        try {
            $TagGroup = TagGroupsHandler::create($Project, $tagGroupTitle);

            $TagGroup->setWorkingTitle($tagGroupWorkingTitle);
            $TagGroup->setGenerator(self::TAG_GENERATOR);
            $TagGroup->save();
        } catch (QUI\Exception $Exception) {
            QUI\System\Log::addError(
                'Cron :: generateProductAttributeListTags -> Could not'
                . ' add tag group to project ' . $Project->getName() . ' with lang "' . $Project->getLang() . '" -> '
                . $Exception->getMessage()
            );

            throw $Exception;
        }

        return $TagGroup;
    }
}
